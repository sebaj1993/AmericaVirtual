//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebChallenge.ServiceWeather {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WeekForecastContract", Namespace="http://schemas.datacontract.org/2004/07/ServiceChallenge.Contracts")]
    [System.SerializableAttribute()]
    public partial class WeekForecastContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WebChallenge.ServiceWeather.DayForecastSimpleContract[] WeatherDaySimpleContractsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WebChallenge.ServiceWeather.DayForecastSimpleContract[] WeatherDaySimpleContracts {
            get {
                return this.WeatherDaySimpleContractsField;
            }
            set {
                if ((object.ReferenceEquals(this.WeatherDaySimpleContractsField, value) != true)) {
                    this.WeatherDaySimpleContractsField = value;
                    this.RaisePropertyChanged("WeatherDaySimpleContracts");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DayForecastSimpleContract", Namespace="http://schemas.datacontract.org/2004/07/ServiceChallenge.Contracts")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(WebChallenge.ServiceWeather.DayForecastCompleteContract))]
    public partial class DayForecastSimpleContract : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DayField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IconField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureInCelciusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double TemperatureInFarenheitField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Day {
            get {
                return this.DayField;
            }
            set {
                if ((object.ReferenceEquals(this.DayField, value) != true)) {
                    this.DayField = value;
                    this.RaisePropertyChanged("Day");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Icon {
            get {
                return this.IconField;
            }
            set {
                if ((object.ReferenceEquals(this.IconField, value) != true)) {
                    this.IconField = value;
                    this.RaisePropertyChanged("Icon");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TemperatureInCelcius {
            get {
                return this.TemperatureInCelciusField;
            }
            set {
                if ((this.TemperatureInCelciusField.Equals(value) != true)) {
                    this.TemperatureInCelciusField = value;
                    this.RaisePropertyChanged("TemperatureInCelcius");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double TemperatureInFarenheit {
            get {
                return this.TemperatureInFarenheitField;
            }
            set {
                if ((this.TemperatureInFarenheitField.Equals(value) != true)) {
                    this.TemperatureInFarenheitField = value;
                    this.RaisePropertyChanged("TemperatureInFarenheit");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DayForecastCompleteContract", Namespace="http://schemas.datacontract.org/2004/07/ServiceChallenge.Contracts")]
    [System.SerializableAttribute()]
    public partial class DayForecastCompleteContract : WebChallenge.ServiceWeather.DayForecastSimpleContract {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionWeatherField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double HumidityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double ProbabilityOfPrecipitationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double WindSpeedField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DescriptionWeather {
            get {
                return this.DescriptionWeatherField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionWeatherField, value) != true)) {
                    this.DescriptionWeatherField = value;
                    this.RaisePropertyChanged("DescriptionWeather");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Humidity {
            get {
                return this.HumidityField;
            }
            set {
                if ((this.HumidityField.Equals(value) != true)) {
                    this.HumidityField = value;
                    this.RaisePropertyChanged("Humidity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ProbabilityOfPrecipitation {
            get {
                return this.ProbabilityOfPrecipitationField;
            }
            set {
                if ((this.ProbabilityOfPrecipitationField.Equals(value) != true)) {
                    this.ProbabilityOfPrecipitationField = value;
                    this.RaisePropertyChanged("ProbabilityOfPrecipitation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double WindSpeed {
            get {
                return this.WindSpeedField;
            }
            set {
                if ((this.WindSpeedField.Equals(value) != true)) {
                    this.WindSpeedField = value;
                    this.RaisePropertyChanged("WindSpeed");
                }
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceWeather.IServiceWeather")]
    public interface IServiceWeather {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/WeekForecastForCity", ReplyAction="http://tempuri.org/IServiceWeather/WeekForecastForCityResponse")]
        WebChallenge.ServiceWeather.WeekForecastContract WeekForecastForCity(int idCity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/WeekForecastForCity", ReplyAction="http://tempuri.org/IServiceWeather/WeekForecastForCityResponse")]
        System.Threading.Tasks.Task<WebChallenge.ServiceWeather.WeekForecastContract> WeekForecastForCityAsync(int idCity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/DayForecastForCity", ReplyAction="http://tempuri.org/IServiceWeather/DayForecastForCityResponse")]
        WebChallenge.ServiceWeather.DayForecastCompleteContract DayForecastForCity(int idCity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWeather/DayForecastForCity", ReplyAction="http://tempuri.org/IServiceWeather/DayForecastForCityResponse")]
        System.Threading.Tasks.Task<WebChallenge.ServiceWeather.DayForecastCompleteContract> DayForecastForCityAsync(int idCity);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceWeatherChannel : WebChallenge.ServiceWeather.IServiceWeather, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceWeatherClient : System.ServiceModel.ClientBase<WebChallenge.ServiceWeather.IServiceWeather>, WebChallenge.ServiceWeather.IServiceWeather {
        
        public ServiceWeatherClient() {
        }
        
        public ServiceWeatherClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceWeatherClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWeatherClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWeatherClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public WebChallenge.ServiceWeather.WeekForecastContract WeekForecastForCity(int idCity) {
            return base.Channel.WeekForecastForCity(idCity);
        }
        
        public System.Threading.Tasks.Task<WebChallenge.ServiceWeather.WeekForecastContract> WeekForecastForCityAsync(int idCity) {
            return base.Channel.WeekForecastForCityAsync(idCity);
        }
        
        public WebChallenge.ServiceWeather.DayForecastCompleteContract DayForecastForCity(int idCity) {
            return base.Channel.DayForecastForCity(idCity);
        }
        
        public System.Threading.Tasks.Task<WebChallenge.ServiceWeather.DayForecastCompleteContract> DayForecastForCityAsync(int idCity) {
            return base.Channel.DayForecastForCityAsync(idCity);
        }
    }
}
